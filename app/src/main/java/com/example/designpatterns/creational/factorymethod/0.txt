说明:
    Java实现工厂方法模式

    1.工厂方法模式简介

    定义:
    定义一个用于创建对象的接口，让子类决定实例化哪个类。工厂方法使一个类的实例化延迟到其子类。

    组成：
    Product：抽象产品类。
    ConcreteProduct：具体产品类，实现Product接口。
    Factory：抽象工厂类，该方法返回一个Product类型的对象。
    ConcreteFactory：具体工厂类，返回ConcreteProduct实例。


    2.工厂方法模式简单实现
    继续使用生产电脑来举例

    a.创建抽象产品
      电脑产品类，它有一个start方法用于启动电脑：

    b.创建具体产品
      具体的电脑产品分别是联想、惠普、华硕和不知名品牌电脑：

    c.创建抽象工厂
      里面有一个createComputer方法，想生产哪个品牌的电脑就生产那个：

    d.具体工厂
      广达代工厂是一个具体的工厂，他继承抽象工厂，通过反射来生产不同厂家的电脑：

    e.客户端调用


    3.工厂方法与简单工厂
    简单工厂模式我们都知道，在工厂类中包含了必要的逻辑判断，根据不同的条件来动态实例化相关的类，
    对客户端来说，去除了与具体产品的依赖，与此同时也会带来一个问题：如果我们去增加产品，
    比如我们要生产苹果电脑，那我们就需要在工厂类中在添加一个Case分支条件，这违背了开放封闭原则，
    我们对修改也开放了。而工厂方法模式就没有违背这个开放封闭原则，如果我们需要生产苹果电脑，
    并不需要去修改工厂类，直接创建产品就好了。
